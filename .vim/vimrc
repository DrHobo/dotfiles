"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Matt's Vim Configuration File
"   ':help <command>' for help
"   ':set all?' to see currently set configuration settings
"   ':set all&' to set default settings
"   ':source $MYVIMRC' to update configuration changes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Preamble Load Settings {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let userpluginspath = "~/.vim/vimrc_plugins"
"- Load default Vim configuration
source $VIMRUNTIME/defaults.vim
"- Load built-in plugins
silent! packadd cfilter  " 'Cfilter /PAT/' to filter quickfix list
"- Load user plugins
if filereadable(expand(userpluginspath))
  execute "source " . userpluginspath
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Basic Settings {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- General
set nobackup                    " no backup files
set colorcolumn=80,100          " highlight columns
set hidden                      " change buffers without saving
set lazyredraw                  " wait to draw result of repeated macros
set linebreak                   " linewrap full words
set hlsearch                    " highlight matches
set incsearch                   " highlight search while typing
set matchpairs+=<:>             " match < > with %
set mouse=n                     " enable use of mouse in normal mode
set number                      " line numbers; use with relativenumber
set relativenumber              " relative line numbers
set scrolloff=0                 " lines of buffer from top/bottom of display
set spelllang=en_us             " US dictionary for spell check
set nostartofline               " stay in column when C-d, C-u, C-b, C-f
set noswapfile                  " no swap files
set viminfo-=<50,s10            " save large yanks after close
set nowritebackup               " no backup before writing file

"- Command prompt completion
set wildignore=*.o,*~,*.pyc,*.dep,*.png,*.jpg,*.gif,*.swp
set wildmode=longest,list  " complete common match then show available

"- Searching
set ignorecase  " use with smartcase
set smartcase   " foo matches Foo and FOO; Foo matches Foo

"- Status line
set laststatus=2  " always show status line in last window
set statusline=[%n]\ %f\ %h%w%m%r\ %=%y\ %(%l,%c\ %=\ %P%)

"- Tab with spaces
set autoindent     " copy indent from current line to new line
set expandtab      " spaces instead of literal tab
set tabstop=4      " number of spaces in a tab
set shiftround     " round to tab indent level with '<' and '>'
set shiftwidth=4   " number of spaces to use in each (auto)indent
set smarttab       " shiftwidth instead of tabstop at linestart
set softtabstop=4  " backspace through spaced tabs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Basic Keybinds {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Leader key mapping; view all leader keys with ':g/<leader>/'
"- Unmap default <Space> key bind
nnoremap <Space> <nop>
"- Using 'map <Space> <leader>' to also retain default leader of '\'
map <Space> <leader>

"- Buffer movement
nnoremap <C-n> :bn<CR>
nnoremap <C-p> :bp<CR>
nnoremap <leader>d :bdelete<CR>
nnoremap <leader>o :only<CR>
nnoremap <leader>c :close<CR>

"- Rebind arrow keys to resize splits
nnoremap <Left> 1<C-w><
nnoremap <Right> 1<C-w>>
nnoremap <Up> 1<C-w>+
nnoremap <Down> 1<C-w>-

"- Make these commands behave intuitively
nnoremap gg gg0
nnoremap G G0
nnoremap Y y$
nnoremap & :&&<CR>

"- Command line (see vim-husk plugin for more features)
"- Expand current path using %%
cnoremap %% <C-r>=expand('%:p:h')<CR>/
"- Bash shell command line movements
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-a> <Home>
cnoremap <C-d> <Delete>
"- Replace <C-f> for opening command line editor window
set cedit=<C-y>
"- Quickly edit macros e.g. '"<register><leader>m'; must match cedit key bind
nnoremap <leader>m :<C-u><C-r>= 'let @'. v:register .' = '. string(getreg(v:register))<CR><C-e>

" File explore
nnoremap <leader>e :Explore<CR>

"- Toggle visualization of character returns and tabs
nnoremap gl :set list!<CR>

" Turn off highlighted values and refresh display with '<leader>l' and 'yoh'
nnoremap <leader>l :setlocal signcolumn=auto<CR>:nohlsearch<CR><C-l>
nnoremap yoh :setlocal signcolumn=auto<CR>::nohlsearch<CR><C-l>

"- Toggle list (display newlines and tabs)
nnoremap yol :setlocal list!<CR>

"- Toggle relative line number
nnoremap yon :setlocal number! relativenumber! signcolumn=no<CR>

"- Toggle paste
nnoremap <leader>p :set paste!<CR>:set paste?<CR>

"- Paste from clipboard (make sure X11 server is enabled)
nnoremap <leader>P :set paste<CR>"+gP:set nopaste<CR>

"- Select pasted text; overrides useless select-mode bind
nnoremap gV `[V`]

"- Toggle spell checking
nnoremap yos :set spell!<CR>:set spell?<CR>
"- Instantly-correct spelling (or use qs1z=q then @s then @@)
nnoremap [S 1z=
nnoremap ]S 1z=

"- Toggle X-hairs
nnoremap yox :set cursorline!<CR>:set cursorcolumn!<CR>

"- Utility command for substitution
nnoremap <leader>; :%s///ge<Left><Left><Left>
vnoremap <leader>; :s///ge<Left><Left><Left>
nmap g: <leader>;
vmap g: <leader>;

"- Utility commands to input spaces
"- Insert spaces around character
nnoremap css i <Esc>la <Esc>h
nnoremap csh i <Esc>l
nnoremap csl a <Esc>h
"- Insert spaces around line
nnoremap csk mmO <Esc>`m:delmarks m<CR>
nnoremap csj mmo <Esc>`m:delmarks m<CR>

"- Vim RC commands
nnoremap <leader>v :e $MYVIMRC<CR>
nnoremap <leader>r :source %<CR>
nnoremap <leader>R :source $MYVIMRC<CR>

"- Vertical movement - move down in same column based on editor lines
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

"- Save file as root
cmap w!! :w !sudo tee > /dev/null %<CR>

"- Quickfix and file searching
"- Open quickfix window
nnoremap <leader>q :cwindow<CR>
"- Clear and close quickfix list
nnoremap <leader>Q :cexpr []<CR>:cclose<CR>
"- Search files that match pattern
nnoremap <leader>f :<C-u>set path+=.,**<CR>:find 
"- Search for matches in base directory files and below
nnoremap <leader>/ :<C-u>vimgrep //j
    \ **/*<Left><Left><Left><Left><Left><Left><Left>
nnoremap <leader>* :<C-u>noautocmd vimgrep /<C-r><C-w>/j **/*<CR>
vnoremap <leader>* :<C-u>noautocmd vimgrep /<C-r><C-w>/j **/*<CR>
"- Search for matches inside buffer list only and match distinct words
nnoremap <leader>g/ :<C-u>cexpr []<CR>:<C-u>noautocmd bufdo
    \ vimgrepadd //j %<Left><Left><Left><Left>
nnoremap <leader>g* :<C-u>cexpr []<CR>:<C-u>noautocmd bufdo
    \ vimgrepadd /\<<C-r><C-w>\>/j %<CR>
vnoremap <leader>g* :<C-u>cexpr []<CR>:<C-u>noautocmd bufdo
    \ vimgrepadd /\<<C-r><C-w>\>/j %<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Abbreviations {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- :(ic)ab[breviate], i for insert mode, c for command line mode
ab date>> <C-r>=strftime('%Y-%m-%d')<CR>
ab time>> <C-r>=strftime('%H:%M')<CR>
iab TODO>> TODO <C-r>=strftime('%F')<CR>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Appearance {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- To check set appearances, use ':verbose hi'
"- Search online for 'xterm 256 colors' to see visual array
if !exists('g:loaded_plug')  " if plugins are disabled
    highlight ColorColumn ctermbg=255
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Commands {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Full screen help
command! -nargs=1 -complete=help H help <args> | silent only
"- Aliases
command! Vrc :edit $MYVIMRC
command! Vrcp :edit ~/.vim/vimrc_plugins
command! Inst :source $MYVIMRC | :PluginInstall
command! Tco :edit ~/.tmux.conf
command! Bma :edit ~/.bash_matt
command! Brc :edit ~/.bashrc
command! Bpr :edit ~/.bash_profile
command! Bal :edit ~/.bash_aliases
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Terminal Mode {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" For help :h :term
" Remap <Esc> to change terminal to normal mode
if v:version >= 802
  tnoremap <Esc> <C-W>N
endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Advanced {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Turn on folds for vim file-types; specify desired depth
augroup vimFiles
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker foldlevel=1
augroup END

"- Search for selected text, forwards or backwards
"- See https://vim.fandom.com/wiki/Search_for_visually_selected_text
vnoremap <silent> * :<C-u>
  \ let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \ gvy/<C-r>=&ic?'\c':'\C'<CR><C-r><C-r>=substitute(
  \ escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \ gVzv:call setreg('"', old_reg, old_regtype)<CR>
vno remap <silent> # :<C-u>
  \ let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \ gvy?<C-r>=&ic?'\c':'\C'<CR><C-r><C-r>=substitute(
  \ escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \ gVzv:call setreg('"', old_reg, old_regtype)<CR>

"- Save last session on every write, use 'vim -S ~/.vim/lastSession.vim'
augroup fileExit
  autocmd!
  autocmd BufWritePost *
  \ execute "mksession! ~/.vim/lastSession.vim"
augroup END

"- Run macro over visual selection of lines (alternative to '<,'>normal @q)
xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
function! ExecuteMacroOverVisualRange()
  echo "@".getcmdline()
  execute ":'<,'>normal @".nr2char(getchar())
endfunction

"- Use literal tabs in a make file
augroup makeFiles
  autocmd!
  autocmd FileType make set noexpandtab
augroup END

"- Detect OpenFOAM filetype
function! SetFoamFileType()
  for nL in range(1,10)  " loop through the first 10 lines
    if (getline(nL) =~ 'FoamFile' || getline(nL) =~ 'F ield')
      setfiletype cpp  " cpp, foam
      break
    endif
  endfor
endfunction
augroup FOAMCmds
  autocmd!
  autocmd BufRead * call SetFoamFileType()
augroup End

" Source Vimscript without sourcing entire file; or yank and :@<reg>
function! SourceVimscript(type)
  let sel_save = &selection
  let &selection = "inclusive"
  let reg_save = @"
  if a:type == 'line'
    silent execute "normal! '[V']y"
  elseif a:type == 'char'
    silent execute "normal! `[v`]y"
  elseif a:type == "visual"
    silent execute "normal! gvy"
  elseif a:type == "currentline"
    silent execute "normal! yy"
  endif
  let @" = substitute(@", '\n\s*\\', '', 'g')
  " source the content
  @"
  let &selection = sel_save
  let @" = reg_save
endfunction
nnoremap g: :set opfunc=SourceVimscript<cr>g@
vnoremap g: :<c-U>call SourceVimscript("visual")<cr>
nnoremap g:: :call SourceVimscript("currentline")<cr>

"- Turn on spell check for certain file types
augroup enableSpellCheck
  autocmd!
  autocmd BufRead *.txt,*.tex,*.md,*.rst setlocal spell
    \ | syntax spell toplevel
augroup END
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1

" Tips and Tricks {{{1
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"- Using Vim from the Command Line
"------------------------------------------------------------------------------
"- -c or +  for executing :commands with | inbetween commands
"- -s       for executing normal-mode commands

"- Delete all lines with foo in them from command line
"-   vi -u NONE -N -c "v/foo/d|wq" fooAndBar.txt
"-   vi -u NONE -N +"v/foo/d|wq" fooAndBar.txt
"-   vi -u NONE -N -s normalCmdsScript.vim fooAndBar.txt

"- In normalCmdsScript.vim
"-   :v/foo/d<CR>:wq<CR>

"- In fooAndBar.txt
"-   This line has a bar and a foo
"-   This line only has a bar
"-   This line only has a foo

"- In fooAndBar.txt after modification
"-   This line only has a bar
"------------------------------------------------------------------------------

"- In-File Tips
"------------------------------------------------------------------------------
"- Substitution:
"- Use :cfdo %s/SEARCH/REPLACE/ge to modify all files in the quickfix list
"-  See also :bufdo, :argdo, and :windo
"- Use :args ## % to append current file to arglist
"- Use & in normal model to repeat substitution
"- Use \=str2float(submatch(1)) instead of \1 when using :s with math

"- Scripting with Python within Vim:
"- Remove comment tag on the Python command and type :.!python3
"- Or highlight line(s) then !python3
"- for i, x in enumerate("ABC"): print("Person %i is %s"%(i,x))

"- List all lines where the word under the cursor appears: [I or [i for first

"- Source Vimscript code without sourcing entire file: yank code and :@0

"- View current vim environement:
"-   https://vim.fandom.com/wiki/Displaying_the_current_Vim_environment
"- View message outputs in separate buffer:
"-   :redir @r | let g:
"-   :new | put r | redir END
"------------------------------------------------------------------------------

"- Easter eggs
"------------------------------------------------------------------------------
"- :Ni!
"- :h 42
"- :h UserGettingBored
"- :h holy-grail
"- :smile
"- :h help!
"------------------------------------------------------------------------------
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" }}}1
